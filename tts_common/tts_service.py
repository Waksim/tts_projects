"""
TTS Service - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Microsoft Edge TTS API
"""

import asyncio
import os
import time
from typing import List, Callable, Optional, Awaitable

import edge_tts

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–ù–¢–ï–ó–ê ---
VOICE = "ru-RU-DmitryNeural"
DEFAULT_RATE = "+50%"
DEFAULT_PITCH = "+0Hz"
MAX_RETRIES = 3
INITIAL_RETRY_DELAY = 10
CHUNK_CHAR_LIMIT = 3000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –§–ê–ô–õ–ê ---
MIN_BYTES_PER_CHAR = 270
VALIDATION_TOLERANCE = 0.7

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
TTS_SEMAPHORE = asyncio.Semaphore(10)


async def _merge_mp3_parts(part_files: List[str], final_path: str) -> bool:
    """
    –°—à–∏–≤–∞–µ—Ç —á–∞—Å—Ç–∏ MP3 –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é ffmpeg –∏ —É–¥–∞–ª—è–µ—Ç —á–∞—Å—Ç–∏.
    """
    print(f"   –°—à–∏–≤–∞—é {len(part_files)} —á–∞—Å—Ç–µ–π –≤ {os.path.basename(final_path)}...", flush=True)
    list_file_path = f"{final_path}.list.txt"

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª-—Å–ø–∏—Å–æ–∫ –¥–ª—è ffmpeg
        with open(list_file_path, 'w', encoding='utf-8') as f:
            for part_file in part_files:
                f.write(f"file '{os.path.abspath(part_file)}'\n")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ –±–µ—Å—à–æ–≤–Ω–æ–π –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        command = [
            'ffmpeg',
            '-y',
            '-f', 'concat',
            '-safe', '0',
            '-i', list_file_path,
            '-c', 'copy',
            final_path
        ]

        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg –ø—Ä–∏ —Å—à–∏–≤–∫–µ —Ñ–∞–π–ª–∞ {os.path.basename(final_path)}:", flush=True)
            print(stderr.decode(errors='ignore'), flush=True)
            return False

        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å—à–∏—Ç. –£–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏...", flush=True)
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—à–∏–≤–∫–∏: {e}", flush=True)
        return False
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for part_file in part_files:
            if os.path.exists(part_file):
                try:
                    os.remove(part_file)
                except OSError:
                    pass
        if os.path.exists(list_file_path):
            try:
                os.remove(list_file_path)
            except OSError:
                pass


async def _synthesize_single_chunk(
    text: str,
    mp3_path: str,
    voice: str = VOICE,
    rate: str = DEFAULT_RATE,
    pitch: str = DEFAULT_PITCH
) -> bool:
    """
    –ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    """
    current_delay = INITIAL_RETRY_DELAY
    for attempt in range(MAX_RETRIES):
        try:
            # –°–æ–∑–¥–∞–µ–º Communicate –±–µ–∑ —Å—Ç–∏–ª–µ–π (–æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è edge-tts)
            communicate = edge_tts.Communicate(text=text, voice=voice, rate=rate, pitch=pitch)
            await asyncio.wait_for(communicate.save(mp3_path), timeout=600.0)

            if not os.path.exists(mp3_path):
                raise ValueError("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

            file_size = os.path.getsize(mp3_path)
            expected_min_size = len(text) * MIN_BYTES_PER_CHAR
            min_required_size = int(expected_min_size * VALIDATION_TOLERANCE)

            if file_size < min_required_size:
                raise ValueError(
                    f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_size} –ë, < —Ç—Ä–µ–±—É–µ–º—ã—Ö {min_required_size} –ë."
                )

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω —Ñ–∞–π–ª: {os.path.basename(mp3_path)}", flush=True)
            return True

        except Exception as e:
            if os.path.exists(mp3_path):
                try:
                    os.remove(mp3_path)
                except OSError:
                    pass

            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}): {e}", flush=True)
            if attempt < MAX_RETRIES - 1:
                print(f"   –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {current_delay} —Å–µ–∫—É–Ω–¥...", flush=True)
                await asyncio.sleep(current_delay)
                current_delay *= 2
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å {os.path.basename(mp3_path)} –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.", flush=True)
                return False
    return False


async def synthesize_text(
    text: str,
    output_path: str,
    voice: str = VOICE,
    rate: str = DEFAULT_RATE,
    pitch: str = DEFAULT_PITCH,
    chunk_limit: int = CHUNK_CHAR_LIMIT
) -> bool:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ç–µ–∫—Å—Ç–∞ –≤ MP3.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —á–∞–Ω–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –∏ —Å—à–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3 —Ñ–∞–π–ª–∞
        voice: –ì–æ–ª–æ—Å TTS (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru-RU-DmitryNeural)
        rate: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+50%")
        pitch: –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "+0Hz")
        chunk_limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö

    Returns:
        True –µ—Å–ª–∏ —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    from .text_utils import split_text_into_chunks

    start_time = time.monotonic()
    char_count = len(text)
    print(f"–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ç–µ–∑ –¥–ª—è —Ñ–∞–π–ª–∞: {os.path.basename(output_path)}", flush=True)

    output_dir = os.path.dirname(output_path)
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)

    chunks = split_text_into_chunks(text, chunk_limit)
    if not chunks:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.", flush=True)
        return False

    print(f"   –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π. –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ç–µ–∑...", flush=True)

    # –ï—Å–ª–∏ –æ–¥–∏–Ω —á–∞–Ω–∫ - —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if len(chunks) == 1:
        async with TTS_SEMAPHORE:
            success = await _synthesize_single_chunk(chunks[0], output_path, voice, rate, pitch)

        duration = time.monotonic() - start_time
        speed = char_count / duration if duration > 0 else 0
        print(f"üìä –û–∑–≤—É—á–µ–Ω–æ {char_count} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {duration:.2f}—Å (—Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f} —Å–∏–º–≤/—Å)", flush=True)
        print(f"–°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—Ö' if success else '–ü—Ä–æ–≤–∞–ª'}", flush=True)
        return success

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ - —Å–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏ –∏ —Å—à–∏–≤–∞–µ–º
    filename_base = os.path.splitext(os.path.basename(output_path))[0]

    tasks = []
    part_filepaths = []
    task_indices = [] # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞

    for i, chunk_text in enumerate(chunks):
        part_filepath = os.path.join(output_dir, f"{filename_base}_part_{i + 1}.mp3")
        part_filepaths.append(part_filepath)

        async def synthesize_chunk_task(idx, text_to_synth, path): # –ü–µ—Ä–µ–¥–∞–µ–º idx
            async with TTS_SEMAPHORE:
                return idx, await _synthesize_single_chunk(text_to_synth, path, voice, rate, pitch)

        tasks.append(synthesize_chunk_task(i, chunk_text, part_filepath)) # –ü–µ—Ä–µ–¥–∞–µ–º i
        task_indices.append(i) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ
    results = await asyncio.gather(*tasks, return_exceptions=True)

    parts_dict = {} # {index: filepath}
    all_chunks_succeeded = True

    for i, result in enumerate(results):
        original_idx = task_indices[i] # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        if isinstance(result, Exception):
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Å–∏–Ω—Ç–µ–∑–∞ —á–∞—Å—Ç–∏ {original_idx + 1}: {result}", flush=True)
            all_chunks_succeeded = False
        elif result[1] is True: # result[1] - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç _synthesize_single_chunk
            parts_dict[original_idx] = part_filepaths[original_idx]
        else:
            all_chunks_succeeded = False

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    created_parts = [parts_dict[i] for i in sorted(parts_dict.keys())]

    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —á–∞—Å—Ç—å –Ω–µ —É–¥–∞–ª–∞—Å—å, —á–∏—Å—Ç–∏–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if not all_chunks_succeeded or len(created_parts) != len(chunks):
        print(f"‚ùå –°–∏–Ω—Ç–µ–∑ –ø—Ä–æ–≤–∞–ª–µ–Ω. –û—á–∏—Å—Ç–∫–∞...", flush=True)
        for part_file in part_filepaths: # –ß–∏—Å—Ç–∏–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(part_file):
                try:
                    os.remove(part_file)
                except OSError:
                    pass
        return False

    print(f"   –ü–æ—Ä—è–¥–æ–∫ —á–∞—Å—Ç–µ–π –ø–µ—Ä–µ–¥ —Å—à–∏–≤–∞–Ω–∏–µ–º: {[os.path.basename(p) for p in created_parts]}", flush=True) # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    final_success = await _merge_mp3_parts(created_parts, output_path)

    duration = time.monotonic() - start_time
    speed = char_count / duration if duration > 0 else 0
    status_msg = '–£—Å–ø–µ—Ö' if final_success else '–ü—Ä–æ–≤–∞–ª'
    print(f"üìä –û–∑–≤—É—á–µ–Ω–æ {char_count} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {duration:.2f}—Å (—Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f} —Å–∏–º–≤/—Å)", flush=True)
    print(f"–°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: {status_msg}", flush=True)

    return final_success


async def synthesize_text_chunks(
    chunks: List[str],
    output_path: str,
    voice: str = VOICE,
    rate: str = DEFAULT_RATE,
    pitch: str = DEFAULT_PITCH
) -> bool:
    """
    –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏ —Ç–µ–∫—Å—Ç–∞.
    –£–¥–æ–±–Ω–æ –∫–æ–≥–¥–∞ —á–∞–Ω–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ —Å –æ—Å–æ–±–æ–π –ª–æ–≥–∏–∫–æ–π.
    """
    if not chunks:
        return False

    full_text = "\n\n".join(chunks)
    return await synthesize_text(full_text, output_path, voice, rate, pitch)


async def synthesize_text_with_duration_limit(
    text: str,
    output_base_path: str,
    max_duration_minutes: int = None,
    voice: str = VOICE,
    rate: str = DEFAULT_RATE,
    pitch: str = DEFAULT_PITCH,
    chunk_limit: int = CHUNK_CHAR_LIMIT,
    on_part_ready: Optional[Callable[[int, str, int], Awaitable[None]]] = None
) -> List[str]:
    """
    –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
        output_base_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω _part_N –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π)
        max_duration_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (None = –±–µ–∑ –ª–∏–º–∏—Ç–∞)
        voice: –ì–æ–ª–æ—Å TTS
        rate: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        pitch: –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞
        chunk_limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        on_part_ready: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π callback, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —á–∞—Å—Ç—å –≥–æ—Ç–æ–≤–∞.
                       –ü—Ä–∏–Ω–∏–º–∞–µ—Ç (part_number, file_path, total_parts)

    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º MP3 —Ñ–∞–π–ª–∞–º (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Å–∏–Ω—Ç–µ–∑ –Ω–µ —É–¥–∞–ª—Å—è)
    """
    from .duration_utils import split_text_by_duration, estimate_duration_minutes

    start_time = time.monotonic()
    char_count = len(text)
    print(f"–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ç–µ–∑ —Å –ª–∏–º–∏—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {max_duration_minutes} –º–∏–Ω" if max_duration_minutes else "–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ –ª–∏–º–∏—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", flush=True)
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {char_count}", flush=True)

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ª–∏–º–∏—Ç—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    text_parts = split_text_by_duration(text, max_duration_minutes)

    if not text_parts:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.", flush=True)
        return []

    print(f"   –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_parts)} —á–∞—Å—Ç–µ–π –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", flush=True)

    # –ï—Å–ª–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
    if len(text_parts) == 1:
        success = await synthesize_text(
            text_parts[0],
            output_base_path,
            voice,
            rate,
            pitch,
            chunk_limit
        )
        duration = time.monotonic() - start_time
        speed = char_count / duration if duration > 0 else 0
        print(f"üìä –ò—Ç–æ–≥–æ –æ–∑–≤—É—á–µ–Ω–æ {char_count} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {duration:.2f}—Å (—Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f} —Å–∏–º–≤/—Å)", flush=True)
        return [output_base_path] if success else []

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _part_N
    output_dir = os.path.dirname(output_base_path)
    base_name = os.path.basename(output_base_path)
    name_without_ext = os.path.splitext(base_name)[0]

    total_parts = len(text_parts)
    created_files = []
    tasks = []

    for i, part_text in enumerate(text_parts, start=1):
        part_filename = f"{name_without_ext}_part_{i}.mp3"
        part_path = os.path.join(output_dir, part_filename)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        async def synthesize_part(part_num, text_content, file_path):
            success = await synthesize_text(
                text_content,
                file_path,
                voice,
                rate,
                pitch,
                chunk_limit
            )
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —á–∞—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∏ callback –∑–∞–¥–∞–Ω
            if success and on_part_ready:
                await on_part_ready(part_num, file_path, total_parts)
            return (part_num, file_path, success)

        tasks.append(synthesize_part(i, part_text, part_path))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks, return_exceptions=True)

    parts_dict = {} # {part_num: file_path}
    all_parts_succeeded = True

    for result in results:
        if isinstance(result, Exception):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —á–∞—Å—Ç–∏: {result}", flush=True)
            all_parts_succeeded = False
        elif result[2]:  # success == True
            part_num, file_path, _ = result
            parts_dict[part_num] = file_path
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å: {result[1]}", flush=True)
            all_parts_succeeded = False

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º —á–∞—Å—Ç–µ–π
    created_files = []
    for i in range(1, total_parts + 1):
        if i in parts_dict:
            created_files.append(parts_dict[i])

    print(f"   –ü–æ—Ä—è–¥–æ–∫ —á–∞—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º: {[os.path.basename(p) for p in created_files]}", flush=True) # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, —É–¥–∞–ª—è–µ–º –≤—Å–µ
    if not all_parts_succeeded or len(created_files) != total_parts:
        print(f"‚ùå –°–∏–Ω—Ç–µ–∑ –ø—Ä–æ–≤–∞–ª–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ {len(created_files)} –∏–∑ {total_parts} —á–∞—Å—Ç–µ–π. –û—á–∏—Å—Ç–∫–∞...", flush=True)
        for file_path in parts_dict.values(): # –ß–∏—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except OSError:
                    pass
        return []

    duration = time.monotonic() - start_time
    speed = char_count / duration if duration > 0 else 0
    print(f"üìä –ò—Ç–æ–≥–æ –æ–∑–≤—É—á–µ–Ω–æ {char_count} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ {duration:.2f}—Å (—Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f} —Å–∏–º–≤/—Å)", flush=True)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤", flush=True)
    return created_files
