"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram Bot
"""

import os
import sys
import asyncio
import logging
import shutil
from pathlib import Path

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    FSInputFile,
    CallbackQuery
)
from aiogram.enums import ChatAction
from aiogram.exceptions import TelegramBadRequest
import re

# –õ–æ–≥–≥–µ—Ä –¥–ª—è handlers
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ tts_common
sys.path.insert(0, str(Path(__file__).parent.parent))

from tts_common import (
    synthesize_text,
    synthesize_text_with_duration_limit,
    parse_document,
    parse_url,
    is_valid_url,
    StorageManager,
    sanitize_filename,
    generate_filename_from_text,
    estimate_duration_minutes,
    format_duration_display,
    calculate_parts_info
)
from tts_common.document_parser import SUPPORTED_EXTENSIONS

from config import (
    WELCOME_MESSAGE,
    PROCESSING_MESSAGE,
    AUDIO_DIR,
    TTS_VOICE,
    TTS_RATE,
    TTS_PITCH,
    MAX_STORAGE_MB,
    OWNER_ID,
    AVAILABLE_VOICES
)
from database import (
    save_request,
    add_tracked_channel,
    add_tracked_chat,
    get_tracked_channels,
    get_tracked_chats,
    save_voiced_message,
    get_last_voiced_message_id,
    get_user_voice,
    set_user_voice,
    get_user_rate,
    set_user_rate,
    get_user_max_duration,
    set_user_max_duration
)
from telethon_service import get_telethon_service
from keyboards import (
    get_main_menu_keyboard,
    get_back_button_keyboard,
    get_posts_count_keyboard,
    get_my_channels_keyboard,
    get_messages_count_keyboard,
    get_my_chats_keyboard,
    get_voice_selection_keyboard,
    get_rate_selection_keyboard,
    get_duration_selection_keyboard
)
from states import AddChannelStates, AddChatStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage_manager = StorageManager(str(AUDIO_DIR), MAX_STORAGE_MB)


# ===== HELPER –ö–õ–ê–°–° –î–õ–Ø –£–ü–û–†–Ø–î–û–ß–ï–ù–ù–û–ô –û–¢–ü–†–ê–í–ö–ò –ß–ê–°–¢–ï–ô =====


class OrderedPartSender:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–µ–π –∞—É–¥–∏–æ –ø–æ –º–µ—Ä–µ –∏—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (1, 2, 3, ...),
    –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    """

    def __init__(self, message: Message, total_parts: int, title_formatter):
        """
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
            total_parts: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
            title_formatter: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è (part_num, total_parts) -> str
        """
        self.message = message
        self.total_parts = total_parts
        self.title_formatter = title_formatter
        self.next_to_send = 1  # –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.ready_parts = {}  # –°–ª–æ–≤–∞—Ä—å {part_num: file_path} –≥–æ—Ç–æ–≤—ã—Ö, –Ω–æ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        self.lock = asyncio.Lock()  # –î–ª—è thread-safe –¥–æ—Å—Ç—É–ø–∞

    async def on_part_ready(self, part_num: int, file_path: str, total_parts: int):
        """
        Callback, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –∫–æ–≥–¥–∞ —á–∞—Å—Ç—å –≥–æ—Ç–æ–≤–∞.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—å –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø–æ –ø–æ—Ä—è–¥–∫—É, –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
        """
        async with self.lock:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—É—é —á–∞—Å—Ç—å
            self.ready_parts[part_num] = file_path
            print(f"‚úÖ –ß–∞—Å—Ç—å {part_num}/{total_parts} –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –∏ –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É
            while self.next_to_send in self.ready_parts:
                current_part = self.next_to_send
                current_file = self.ready_parts.pop(current_part)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                title = self.title_formatter(current_part, self.total_parts)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                try:
                    audio_file = FSInputFile(current_file)
                    await self.message.answer_audio(
                        audio_file,
                        title=title,
                        performer="MKttsBOT"
                    )
                    print(f"üì§ –ß–∞—Å—Ç—å {current_part}/{self.total_parts} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    try:
                        os.remove(current_file)
                    except OSError:
                        pass
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {current_part}: {e}")

                self.next_to_send += 1


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(WELCOME_MESSAGE)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message)


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(message)


async def show_main_menu(message: Message, edit: bool = False):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        edit: –ï—Å–ª–∏ True, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user_id = message.from_user.id
    markup = get_main_menu_keyboard(user_id)
    text = "üéõ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if edit:
        try:
            await message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(text, reply_markup=markup, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")


def get_voice_display_name(voice_name: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –≥–æ–ª–æ—Å–∞
    if voice_name in AVAILABLE_VOICES:
        display_name = AVAILABLE_VOICES[voice_name]["name"]
    else:
        display_name = voice_name  # fallback –Ω–∞ ID –≥–æ–ª–æ—Å–∞

    return display_name


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    voice_name = await get_user_voice(user_id)
    voice_display = get_voice_display_name(voice_name)

    help_text = f"""
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

<b>–†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é (/menu) –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/add_channel @username N - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/my_channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/voice_new - –û–∑–≤—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
"""

    if is_owner(user_id):
        help_text += """
<b>–†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞):</b>
/add_chat @username N - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
/my_chats - –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
"""

    help_text += f"""
<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>
{', '.join(SUPPORTED_EXTENSIONS)}

<b>–°–ø–æ—Å–æ–±—ã –æ–∑–≤—É—á–∫–∏:</b>
1Ô∏è‚É£ <b>–¢–µ–∫—Å—Ç</b> - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç
2Ô∏è‚É£ <b>–î–æ–∫—É–º–µ–Ω—Ç</b> - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª
3Ô∏è‚É£ <b>–°—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL
4Ô∏è‚É£ <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TTS:</b>
üé§ –í–∞—à –≥–æ–ª–æ—Å: {voice_display}
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {TTS_RATE}

üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {MAX_STORAGE_MB} MB
"""
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    stats = storage_manager.get_storage_stats()

    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</b>

üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['total_size_mb']:.2f} MB / {stats['max_size_mb']:.0f} MB
üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {stats['used_percent']:.1f}%
üìÅ –§–∞–π–ª–æ–≤: {stats['file_count']}
‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: {stats['available_mb']:.2f} MB
"""
    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.document)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = message.document
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_name = document.file_name
    file_ext = os.path.splitext(file_name)[1].lower()

    if file_ext not in SUPPORTED_EXTENSIONS:
        await message.answer(
            f"‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ '{file_ext}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_EXTENSIONS)}"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(PROCESSING_MESSAGE)

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(document.file_id)
        temp_file_path = AUDIO_DIR / f"temp_{user_id}_{document.file_id}{file_ext}"

        await message.bot.download_file(file.file_path, temp_file_path)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        await processing_msg.edit_text("üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        text = parse_document(str(temp_file_path))

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        voice_name = await get_user_voice(user_id)
        speech_rate = await get_user_rate(user_id)
        max_duration = await get_user_max_duration(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        free_space = shutil.disk_usage("/").free
        if free_space < 300_000_000:  # < 300MB
            await processing_msg.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ({free_space/1024/1024:.0f} MB —Å–≤–æ–±–æ–¥–Ω–æ).\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ."
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        parts_count, avg_duration = calculate_parts_info(text, max_duration)

        if parts_count > 1:
            duration_text = format_duration_display(avg_duration)
            await processing_msg.edit_text(
                f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...\n\n"
                f"–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {parts_count} —á–∞—Å—Ç–µ–π (~{duration_text} –∫–∞–∂–¥–∞—è)"
            )
        else:
            await processing_msg.edit_text("üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...")

        await message.bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö 7 —Å–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
        audio_filename = generate_filename_from_text(text, user_id)
        audio_path = AUDIO_DIR / audio_filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ (–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å = –±–æ–ª—å—à–µ —Ñ–∞–π–ª)
        multiplier = 300 if speech_rate in ["+25%", "+50%", "+75%", "+100%"] else 600
        estimated_size = len(text) * multiplier * 3  # √ó3 –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await storage_manager.ensure_space_available_async(estimated_size)

        # –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –∏–º–µ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        doc_name = os.path.splitext(file_name)[0]

        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if parts_count > 1:
            # –°–æ–∑–¥–∞–µ–º sender –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            def title_formatter(part_num, total):
                return f"–ß–∞—Å—Ç—å {part_num}/{total} - {doc_name}"

            sender = OrderedPartSender(message, parts_count, title_formatter)

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Å callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            audio_files = await synthesize_text_with_duration_limit(
                text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH,
                on_part_ready=sender.on_part_ready
            )
        else:
            # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ callback
            audio_files = await synthesize_text_with_duration_limit(
                text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH
            )

        if not audio_files:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é (–ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback)
        if len(audio_files) == 1:
            await processing_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
            audio_file = FSInputFile(audio_files[0])
            await message.answer_audio(
                audio_file,
                title=file_name,
                performer="MKttsBOT"
            )
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(audio_files[0])
            except OSError:
                pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É)
        await save_request(
            user_id=user_id,
            username=username,
            request_type='document',
            content=file_name,
            audio_path=audio_files[0] if audio_files else None,
            status='success'
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        await processing_msg.edit_text(error_msg)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
        await save_request(
            user_id=user_id,
            username=username,
            request_type='document',
            content=file_name,
            status='error',
            error_message=str(e)
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_file_path.exists():
            os.remove(temp_file_path)


@router.message(F.text, StateFilter(None))
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏–ª–∏ URL)"""
    text = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
    if is_valid_url(text):
        await handle_url(message, text, user_id, username)
    else:
        await handle_plain_text(message, text, user_id, username)


async def handle_url(message: Message, url: str, user_id: int, username: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL"""
    processing_msg = await message.answer(PROCESSING_MESSAGE)

    try:
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await processing_msg.edit_text("üåê –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

        from tts_common.web_parser import parse_url_async
        text = await parse_url_async(url)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        voice_name = await get_user_voice(user_id)
        speech_rate = await get_user_rate(user_id)
        max_duration = await get_user_max_duration(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        free_space = shutil.disk_usage("/").free
        if free_space < 300_000_000:  # < 300MB
            await processing_msg.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ({free_space/1024/1024:.0f} MB —Å–≤–æ–±–æ–¥–Ω–æ).\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ."
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        parts_count, avg_duration = calculate_parts_info(text, max_duration)

        if parts_count > 1:
            duration_text = format_duration_display(avg_duration)
            await processing_msg.edit_text(
                f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...\n\n"
                f"–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {parts_count} —á–∞—Å—Ç–µ–π (~{duration_text} –∫–∞–∂–¥–∞—è)"
            )
        else:
            await processing_msg.edit_text("üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...")

        await message.bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö 7 —Å–ª–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        audio_filename = generate_filename_from_text(text, user_id)
        audio_path = AUDIO_DIR / audio_filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ (–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å = –±–æ–ª—å—à–µ —Ñ–∞–π–ª)
        multiplier = 300 if speech_rate in ["+25%", "+50%", "+75%", "+100%"] else 600
        estimated_size = len(text) * multiplier * 3  # √ó3 –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await storage_manager.ensure_space_available_async(estimated_size)

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 7 —Å–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        web_title = ' '.join(text.split()[:7])

        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if parts_count > 1:
            # –°–æ–∑–¥–∞–µ–º sender –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            def title_formatter(part_num, total):
                return f"–ß–∞—Å—Ç—å {part_num}/{total} - {web_title}"

            sender = OrderedPartSender(message, parts_count, title_formatter)

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Å callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            audio_files = await synthesize_text_with_duration_limit(
                text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH,
                on_part_ready=sender.on_part_ready
            )
        else:
            # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ callback
            audio_files = await synthesize_text_with_duration_limit(
                text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH
            )

        if not audio_files:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é (–ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback)
        if len(audio_files) == 1:
            await processing_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
            audio_file = FSInputFile(audio_files[0])
            await message.answer_audio(
                audio_file,
                title=web_title,
                performer="MKttsBOT"
            )
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(audio_files[0])
            except OSError:
                pass

        await processing_msg.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É)
        await save_request(
            user_id=user_id,
            username=username,
            request_type='url',
            content=url,
            audio_path=audio_files[0] if audio_files else None,
            status='success'
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {str(e)}"
        await processing_msg.edit_text(error_msg)

        await save_request(
            user_id=user_id,
            username=username,
            request_type='url',
            content=url,
            status='error',
            error_message=str(e)
        )


async def handle_plain_text(message: Message, text: str, user_id: int, username: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""

    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    processing_msg = await message.answer(PROCESSING_MESSAGE)

    try:
        await message.bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        voice_name = await get_user_voice(user_id)
        speech_rate = await get_user_rate(user_id)
        max_duration = await get_user_max_duration(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        free_space = shutil.disk_usage("/").free
        if free_space < 300_000_000:  # < 300MB
            await processing_msg.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ({free_space/1024/1024:.0f} MB —Å–≤–æ–±–æ–¥–Ω–æ).\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ."
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        parts_count, avg_duration = calculate_parts_info(text, max_duration)

        if parts_count > 1:
            duration_text = format_duration_display(avg_duration)
            await processing_msg.edit_text(
                f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...\n\n"
                f"–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {parts_count} —á–∞—Å—Ç–µ–π (~{duration_text} –∫–∞–∂–¥–∞—è)"
            )

        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 7 —Å–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        audio_filename = generate_filename_from_text(text, user_id)
        audio_path = AUDIO_DIR / audio_filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ (–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å = –±–æ–ª—å—à–µ —Ñ–∞–π–ª)
        multiplier = 300 if speech_rate in ["+25%", "+50%", "+75%", "+100%"] else 600
        estimated_size = len(text) * multiplier * 3  # √ó3 –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await storage_manager.ensure_space_available_async(estimated_size)

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 7 —Å–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        text_title = ' '.join(text.split()[:7])

        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if parts_count > 1:
            # –°–æ–∑–¥–∞–µ–º sender –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            def title_formatter(part_num, total):
                return f"–ß–∞—Å—Ç—å {part_num}/{total} - {text_title}"

            sender = OrderedPartSender(message, parts_count, title_formatter)

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Å callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            audio_files = await synthesize_text_with_duration_limit(
                text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH,
                on_part_ready=sender.on_part_ready
            )
        else:
            # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ callback
            audio_files = await synthesize_text_with_duration_limit(
                text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH
            )

        if not audio_files:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é (–ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback)
        if len(audio_files) == 1:
            await processing_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
            audio_file = FSInputFile(audio_files[0])
            await message.answer_audio(
                audio_file,
                title=text_title,
                performer="MKttsBOT"
            )
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(audio_files[0])
            except OSError:
                pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É)
        await save_request(
            user_id=user_id,
            username=username,
            request_type='text',
            content=text[:200],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            audio_path=audio_files[0] if audio_files else None,
            status='success'
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: {str(e)}"
        await processing_msg.edit_text(error_msg)

        await save_request(
            user_id=user_id,
            username=username,
            request_type='text',
            content=text[:200],
            status='error',
            error_message=str(e)
        )


# ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ù–ê–õ–ê–ú–ò –ò –ß–ê–¢–ê–ú–ò =====


def is_owner(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞."""
    return user_id == OWNER_ID


@router.message(Command("add_channel"))
async def cmd_add_channel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel.
    –§–æ—Ä–º–∞—Ç: /add_channel @username 10
    """
    user_id = message.from_user.id

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_channel @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /add_channel @svalka_mk 10"
        )
        return

    channel_username = parts[1]
    try:
        initial_count = int(parts[2])
        if initial_count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        return

    processing_msg = await message.answer("‚è≥ –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–∞–ª...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Telethon
        telethon = await get_telethon_service()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await telethon.get_channel_info(channel_username)

        if not channel_info:
            await processing_msg.edit_text(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        channel_id, channel_title = channel_info

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await add_tracked_channel(
            user_id=user_id,
            channel_username=channel_username.lstrip('@'),
            channel_id=channel_id,
            channel_title=channel_title
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
        await processing_msg.edit_text(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {channel_title}\n\n‚è≥ –û–∑–≤—É—á–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {initial_count} –ø–æ—Å—Ç–æ–≤...")

        messages = await telethon.get_channel_messages(channel_username, limit=initial_count)

        if not messages:
            await processing_msg.edit_text(
                f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {channel_title}\n\n"
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏."
            )
            return

        await voice_messages(
            message,
            messages,
            user_id,
            source_type='channel',
            source_id=channel_id,
            status_msg=processing_msg,
            source_title=channel_title
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")


@router.message(Command("add_chat"))
async def cmd_add_chat(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_chat (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞).
    –§–æ—Ä–º–∞—Ç: /add_chat @username 10 –∏–ª–∏ /add_chat 123456789 10
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_owner(user_id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_chat @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "–ò–ª–∏: /add_chat ID –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /add_chat @friend 10"
        )
        return

    chat_identifier = parts[1]
    try:
        initial_count = int(parts[2])
        if initial_count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        return

    processing_msg = await message.answer("‚è≥ –î–æ–±–∞–≤–ª—è—é —á–∞—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Telethon
        telethon = await get_telethon_service()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = await telethon.get_chat_info(chat_identifier)

        if not chat_info:
            await processing_msg.edit_text(f"‚ùå –ß–∞—Ç {chat_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        chat_id, chat_title, chat_username = chat_info

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await add_tracked_chat(
            user_id=user_id,
            chat_id=chat_id,
            chat_username=chat_username,
            chat_title=chat_title
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await processing_msg.edit_text(f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {chat_title}\n\n‚è≥ –û–∑–≤—É—á–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {initial_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        messages = await telethon.get_chat_messages(chat_id, limit=initial_count)

        if not messages:
            await processing_msg.edit_text(
                f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {chat_title}\n\n"
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏."
            )
            return

        await voice_messages(
            message,
            messages,
            user_id,
            source_type='chat',
            source_id=chat_id,
            status_msg=processing_msg,
            source_title=chat_title
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}")


@router.message(Command("voice_new"))
async def cmd_voice_new(message: Message):
    """–û–∑–≤—É—á–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    user_id = message.from_user.id

    processing_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Telethon
        telethon = await get_telethon_service()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã
        channels = await get_tracked_channels(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        chats = []
        if is_owner(user_id):
            chats = await get_tracked_chats(user_id)

        if not channels and not chats:
            await processing_msg.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —á–∞—Ç–æ–≤!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."
            )
            return

        total_new_messages = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
        for channel in channels:
            last_msg_id = await get_last_voiced_message_id(user_id, 'channel', channel.channel_id)

            messages = await telethon.get_channel_messages(
                channel.channel_username,
                limit=100,  # –ú–∞–∫—Å–∏–º—É–º 100 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
                min_id=last_msg_id
            )

            if messages:
                await processing_msg.edit_text(
                    f"üì¢ –ö–∞–Ω–∞–ª: {channel.channel_title}\n"
                    f"‚è≥ –û–∑–≤—É—á–∏–≤–∞—é {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..."
                )

                await voice_messages(
                    message,
                    messages,
                    user_id,
                    source_type='channel',
                    source_id=channel.channel_id,
                    status_msg=None,  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    source_title=channel.channel_title
                )

                total_new_messages += len(messages)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        for chat in chats:
            last_msg_id = await get_last_voiced_message_id(user_id, 'chat', chat.chat_id)

            messages = await telethon.get_chat_messages(
                chat.chat_id,
                limit=100,
                min_id=last_msg_id
            )

            if messages:
                await processing_msg.edit_text(
                    f"üí¨ –ß–∞—Ç: {chat.chat_title}\n"
                    f"‚è≥ –û–∑–≤—É—á–∏–≤–∞—é {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..."
                )

                await voice_messages(
                    message,
                    messages,
                    user_id,
                    source_type='chat',
                    source_id=chat.chat_id,
                    status_msg=None,
                    source_title=chat.chat_title
                )

                total_new_messages += len(messages)

        if total_new_messages == 0:
            await processing_msg.edit_text("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏!")
        else:
            await processing_msg.edit_text(f"‚úÖ –û–∑–≤—É—á–µ–Ω–æ {total_new_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def voice_messages(
    message: Message,
    messages: list,
    user_id: int,
    source_type: str,
    source_id: int,
    status_msg: Message = None,
    source_title: str = None
):
    """
    –û–∑–≤—É—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç.

    Args:
        message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (message_id, message_text)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        source_type: –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ('channel' –∏–ª–∏ 'chat')
        source_id: ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        status_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        source_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    if not messages:
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ
    valid_messages = []
    for msg_id, text in messages:
        if text and len(text) >= 10:
            valid_messages.append((msg_id, text))

    if not valid_messages:
        if status_msg:
            await status_msg.edit_text("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏")
        return

    try:
        if status_msg:
            await status_msg.edit_text(f"üé§ –û–±—ä–µ–¥–∏–Ω—è—é {len(valid_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        combined_text = "\n\n".join([text for _, text in valid_messages])

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        voice_name = await get_user_voice(user_id)
        speech_rate = await get_user_rate(user_id)
        max_duration = await get_user_max_duration(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        free_space = shutil.disk_usage("/").free
        if free_space < 300_000_000:  # < 300MB
            if status_msg:
                await status_msg.edit_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ({free_space/1024/1024:.0f} MB —Å–≤–æ–±–æ–¥–Ω–æ).\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        parts_count, avg_duration = calculate_parts_info(combined_text, max_duration)

        if parts_count > 1:
            duration_text = format_duration_display(avg_duration)
            if status_msg:
                await status_msg.edit_text(
                    f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤...\n\n"
                    f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {parts_count} —á–∞—Å—Ç–µ–π (~{duration_text} –∫–∞–∂–¥–∞—è)"
                )
        else:
            if status_msg:
                await status_msg.edit_text(f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        audio_filename = generate_filename_from_text(valid_messages[0][1], user_id)
        audio_path = AUDIO_DIR / audio_filename

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ (–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å = –±–æ–ª—å—à–µ —Ñ–∞–π–ª)
        multiplier = 300 if speech_rate in ["+25%", "+50%", "+75%", "+100%"] else 600
        estimated_size = len(combined_text) * multiplier * 3  # √ó3 –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await storage_manager.ensure_space_available_async(estimated_size)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
        if source_title:
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_title = sanitize_filename(source_title).replace('.mp3', '')
            base_title = f"{clean_title} ({len(valid_messages)} messages)"
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            source_name = "Channel" if source_type == "channel" else "Chat"
            base_title = f"{source_name} ({len(valid_messages)} messages)"

        # –ï—Å–ª–∏ —á–∞—Å—Ç–µ–π –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if parts_count > 1:
            # –°–æ–∑–¥–∞–µ–º sender –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            def title_formatter(part_num, total):
                return f"–ß–∞—Å—Ç—å {part_num}/{total} - {base_title}"

            sender = OrderedPartSender(message, parts_count, title_formatter)

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Å callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            audio_files = await synthesize_text_with_duration_limit(
                combined_text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH,
                on_part_ready=sender.on_part_ready
            )
        else:
            # –û–±—ã—á–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ –±–µ–∑ callback
            audio_files = await synthesize_text_with_duration_limit(
                combined_text,
                str(audio_path),
                max_duration_minutes=max_duration,
                voice=voice_name,
                rate=speech_rate,
                pitch=TTS_PITCH
            )

        if not audio_files:
            if status_msg:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
            return

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é (–ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback)
        if len(audio_files) == 1:
            if status_msg:
                await status_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")

            audio_file = FSInputFile(audio_files[0])
            await message.answer_audio(
                audio_file,
                title=base_title,
                performer="MKttsBOT"
            )
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(audio_files[0])
            except OSError:
                pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–∑–≤—É—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        last_msg_id = valid_messages[-1][0]
        await save_voiced_message(
            user_id=user_id,
            source_type=source_type,
            source_id=source_id,
            message_id=last_msg_id,
            message_text=combined_text[:200],
            audio_path=audio_files[0] if audio_files else None
        )

        if status_msg:
            await status_msg.edit_text(f"‚úÖ –û–∑–≤—É—á–µ–Ω–æ {len(valid_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        if status_msg:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("my_channels"))
async def cmd_my_channels(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    user_id = message.from_user.id

    channels = await get_tracked_channels(user_id)

    if not channels:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üì¢ <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    for channel in channels:
        text += f"‚Ä¢ @{channel.channel_username} - {channel.channel_title}\n"

    await message.answer(text, parse_mode="HTML")


@router.message(Command("my_chats"))
async def cmd_my_chats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)."""
    user_id = message.from_user.id

    if not is_owner(user_id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞!")
        return

    chats = await get_tracked_chats(user_id)

    if not chats:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤.")
        return

    text = "üí¨ <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:</b>\n\n"
    for chat in chats:
        username_text = f"@{chat.chat_username}" if chat.chat_username else f"ID: {chat.chat_id}"
        text += f"‚Ä¢ {username_text} - {chat.chat_title}\n"

    await message.answer(text, parse_mode="HTML")


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–ï–°–õ–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò =====


@router.message(F.forward_from | F.forward_from_chat)
async def handle_forwarded(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        text = message.text.strip()
    elif message.caption:
        text = message.caption.strip()

    if not text:
        await message.answer("‚ùå –í –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    await handle_plain_text(message, text, user_id, username)


# ===== CALLBACK HANDLERS –î–õ–Ø INLINE –ö–ù–û–ü–û–ö =====


@router.callback_query(F.data == "back_to_main")
async def callback_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()

    # –û—á–∏—â–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await show_main_menu(callback.message, edit=True)


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await callback.answer()

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    voice_name = await get_user_voice(user_id)
    voice_display = get_voice_display_name(voice_name)

    help_text = f"""
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

<b>–†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é (/menu) –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
/add_channel @username N - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/my_channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/voice_new - –û–∑–≤—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
"""

    if is_owner(user_id):
        help_text += """
<b>–†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞):</b>
/add_chat @username N - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
/my_chats - –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
"""

    help_text += f"""
<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>
{', '.join(SUPPORTED_EXTENSIONS)}

<b>–°–ø–æ—Å–æ–±—ã –æ–∑–≤—É—á–∫–∏:</b>
1Ô∏è‚É£ <b>–¢–µ–∫—Å—Ç</b> - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç
2Ô∏è‚É£ <b>–î–æ–∫—É–º–µ–Ω—Ç</b> - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª
3Ô∏è‚É£ <b>–°—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL
4Ô∏è‚É£ <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ TTS:</b>
üé§ –í–∞—à –≥–æ–ª–æ—Å: {voice_display}
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {TTS_RATE}

üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {MAX_STORAGE_MB} MB
"""
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    try:
        await callback.message.edit_text(help_text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
    except TelegramBadRequest:
        await callback.message.answer(help_text, parse_mode="HTML", reply_markup=get_back_button_keyboard())


@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await callback.answer()

    stats = storage_manager.get_storage_stats()

    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</b>

üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['total_size_mb']:.2f} MB / {stats['max_size_mb']:.0f} MB
üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {stats['used_percent']:.1f}%
üìÅ –§–∞–π–ª–æ–≤: {stats['file_count']}
‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: {stats['available_mb']:.2f} MB
"""
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    try:
        await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
    except TelegramBadRequest:
        await callback.message.answer(stats_text, parse_mode="HTML", reply_markup=get_back_button_keyboard())


@router.callback_query(F.data == "add_channel")
async def callback_add_channel(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await callback.answer()

    text = (
        "üì¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ (—Å @ –∏–ª–∏ –±–µ–∑)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: @svalka_mk"
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(menu_message_id=callback.message.message_id)
    await state.set_state(AddChannelStates.waiting_for_username)


@router.message(StateFilter(AddChannelStates.waiting_for_username))
async def process_channel_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î"""
    channel_username = message.text.strip()
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º message_id –º–µ–Ω—é –∏–∑ state
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telethon
        telethon = await get_telethon_service()
        channel_info = await telethon.get_channel_info(channel_username)

        if not channel_info:
            await message.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        channel_id, channel_title = channel_info

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        await add_tracked_channel(
            user_id=user_id,
            channel_username=channel_username.lstrip('@'),
            channel_id=channel_id,
            channel_title=channel_title
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
        text = (
            f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: <b>{channel_title}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏:"
        )

        keyboard = get_posts_count_keyboard(channel_username.lstrip('@'))

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
        if menu_message_id:
            try:
                await message.bot.edit_message_text(
                    text=text,
                    chat_id=message.chat.id,
                    message_id=menu_message_id,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username
        try:
            await message.delete()
        except:
            pass

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("voice_channel:"))
async def callback_voice_channel(callback: CallbackQuery):
    """–û–∑–≤—É—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: voice_channel:username:count
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    channel_username = parts[1]
    count = int(parts[2])
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–∑–≤—É—á–∫–∏
    await callback.message.edit_text(
        f"‚è≥ –û–∑–≤—É—á–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username}..."
    )

    try:
        telethon = await get_telethon_service()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        messages = await telethon.get_channel_messages(channel_username, limit=count)

        if not messages:
            await callback.message.edit_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è source_id
        channel_info = await telethon.get_channel_info(channel_username)
        if not channel_info:
            await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
            return

        channel_id, channel_title = channel_info

        # –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await voice_messages(
            callback.message,
            messages,
            user_id,
            source_type='channel',
            source_id=channel_id,
            status_msg=callback.message,
            source_title=channel_title
        )

        # –ü–æ—Å–ª–µ –æ–∑–≤—É—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback.message, edit=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "add_chat")
async def callback_add_chat(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    user_id = callback.from_user.id

    if not is_owner(user_id):
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É!", show_alert=True)
        return

    await callback.answer()

    text = (
        "üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username —á–∞—Ç–∞ (—Å @) –∏–ª–∏ ID —á–∞—Ç–∞\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: @friend –∏–ª–∏ 123456789"
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(menu_message_id=callback.message.message_id)
    await state.set_state(AddChatStates.waiting_for_identifier)


@router.message(StateFilter(AddChatStates.waiting_for_identifier))
async def process_chat_identifier(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç username/ID —á–∞—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î"""
    chat_identifier = message.text.strip()
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º message_id –º–µ–Ω—é –∏–∑ state
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telethon
        telethon = await get_telethon_service()
        chat_info = await telethon.get_chat_info(chat_identifier)

        if not chat_info:
            await message.answer(f"‚ùå –ß–∞—Ç {chat_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        chat_id, chat_title, chat_username = chat_info

        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î
        await add_tracked_chat(
            user_id=user_id,
            chat_id=chat_id,
            chat_username=chat_username,
            chat_title=chat_title
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        text = (
            f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: <b>{chat_title}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏:"
        )

        keyboard = get_messages_count_keyboard(chat_id)

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
        if menu_message_id:
            try:
                await message.bot.edit_message_text(
                    text=text,
                    chat_id=message.chat.id,
                    message_id=menu_message_id,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å identifier
        try:
            await message.delete()
        except:
            pass

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("voice_chat:"))
async def callback_voice_chat(callback: CallbackQuery):
    """–û–∑–≤—É—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: voice_chat:chat_id:count
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    chat_id = int(parts[1])
    count = int(parts[2])
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–∑–≤—É—á–∫–∏
    await callback.message.edit_text(
        f"‚è≥ –û–∑–≤—É—á–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞..."
    )

    try:
        telethon = await get_telethon_service()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = await telethon.get_chat_info(chat_id)
        if not chat_info:
            await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ")
            return

        _, chat_title, _ = chat_info

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        messages = await telethon.get_chat_messages(chat_id, limit=count)

        if not messages:
            await callback.message.edit_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"
            )
            return

        # –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await voice_messages(
            callback.message,
            messages,
            user_id,
            source_type='chat',
            source_id=chat_id,
            status_msg=callback.message,
            source_title=chat_title
        )

        # –ü–æ—Å–ª–µ –æ–∑–≤—É—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback.message, edit=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ —á–∞—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "my_channels")
async def callback_my_channels(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()

    user_id = callback.from_user.id
    channels = await get_tracked_channels(user_id)

    if not channels:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\""
        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
        except TelegramBadRequest:
            await callback.message.answer(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
        return

    text = "üì¢ <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ø–æ—Å—Ç–æ–≤:"
    keyboard = get_my_channels_keyboard(channels)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith("channel:"))
async def callback_channel_select(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: channel:username
    channel_username = callback.data.split(":", 1)[1]

    text = f"üì¢ –ö–∞–Ω–∞–ª: <b>@{channel_username}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏:"
    keyboard = get_posts_count_keyboard(channel_username)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "my_chats")
async def callback_my_chats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    user_id = callback.from_user.id

    if not is_owner(user_id):
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É!", show_alert=True)
        return

    await callback.answer()

    chats = await get_tracked_chats(user_id)

    if not chats:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç\""
        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
        except TelegramBadRequest:
            await callback.message.answer(text, parse_mode="HTML", reply_markup=get_back_button_keyboard())
        return

    text = "üí¨ <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:"
    keyboard = get_my_chats_keyboard(chats)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith("chat:"))
async def callback_chat_select(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: chat:chat_id
    chat_id = int(callback.data.split(":", 1)[1])

    text = f"üí¨ <b>–ß–∞—Ç ID: {chat_id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏:"
    keyboard = get_messages_count_keyboard(chat_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == "voice_new")
async def callback_voice_new(callback: CallbackQuery):
    """–û–∑–≤—É—á–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    await callback.answer()

    user_id = callback.from_user.id

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    try:
        await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    except TelegramBadRequest:
        await callback.message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    try:
        telethon = await get_telethon_service()

        channels = await get_tracked_channels(user_id)

        chats = []
        if is_owner(user_id):
            chats = await get_tracked_chats(user_id)

        if not channels and not chats:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —á–∞—Ç–æ–≤!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª' –≤ –º–µ–Ω—é"
            await callback.message.edit_text(text, reply_markup=get_back_button_keyboard())
            return

        total_new_messages = 0

        for channel in channels:
            last_msg_id = await get_last_voiced_message_id(user_id, 'channel', channel.channel_id)

            messages = await telethon.get_channel_messages(
                channel.channel_username,
                limit=100,
                min_id=last_msg_id
            )

            if messages:
                await callback.message.edit_text(
                    f"üì¢ –ö–∞–Ω–∞–ª: {channel.channel_title}\n"
                    f"‚è≥ –û–∑–≤—É—á–∏–≤–∞—é {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..."
                )

                await voice_messages(
                    callback.message,
                    messages,
                    user_id,
                    source_type='channel',
                    source_id=channel.channel_id,
                    status_msg=None,
                    source_title=channel.channel_title
                )

                total_new_messages += len(messages)

        for chat in chats:
            last_msg_id = await get_last_voiced_message_id(user_id, 'chat', chat.chat_id)

            messages = await telethon.get_chat_messages(
                chat.chat_id,
                limit=100,
                min_id=last_msg_id
            )

            if messages:
                await callback.message.edit_text(
                    f"üí¨ –ß–∞—Ç: {chat.chat_title}\n"
                    f"‚è≥ –û–∑–≤—É—á–∏–≤–∞—é {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..."
                )

                await voice_messages(
                    callback.message,
                    messages,
                    user_id,
                    source_type='chat',
                    source_id=chat.chat_id,
                    status_msg=None,
                    source_title=chat.chat_title
                )

                total_new_messages += len(messages)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if total_new_messages == 0:
            await callback.message.edit_text(
                "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏!",
                reply_markup=get_back_button_keyboard()
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ –û–∑–≤—É—á–µ–Ω–æ {total_new_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!",
                reply_markup=get_back_button_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_back_button_keyboard()
        )


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –ì–û–õ–û–°–ê =====


@router.callback_query(F.data == "select_voice")
async def callback_select_voice(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞"""
    await callback.answer()

    text = "üé§ <b>–í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:"
    keyboard = get_voice_selection_keyboard()

    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith("set_voice:"))
async def callback_set_voice(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: set_voice:voice_id
    voice_id = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
    await set_user_voice(user_id, voice_id)

    voice_name = AVAILABLE_VOICES[voice_id]["name"]
    text = f"‚úÖ <b>–ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\nüé§ {voice_name}"

    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button_keyboard()
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button_keyboard()
        )


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –°–ö–û–†–û–°–¢–ò –†–ï–ß–ò =====


@router.callback_query(F.data == "select_rate")
async def callback_select_rate(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏"""
    await callback.answer()

    user_id = callback.from_user.id
    current_rate = await get_user_rate(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    from config import AVAILABLE_RATES
    rate_text = AVAILABLE_RATES.get(current_rate, current_rate)

    text = f"‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏</b>\n\n–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {rate_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    keyboard = get_rate_selection_keyboard()

    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith("set_rate:"))
async def callback_set_rate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: set_rate:rate_value
    rate_value = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    await set_user_rate(user_id, rate_value)

    from config import AVAILABLE_RATES
    rate_label = AVAILABLE_RATES.get(rate_value, rate_value)
    text = f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏: {rate_label}"

    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button_keyboard()
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button_keyboard()
        )


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ê–£–î–ò–û =====


@router.callback_query(F.data == "select_duration")
async def callback_select_duration(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ"""
    await callback.answer()

    user_id = callback.from_user.id
    current_duration = await get_user_max_duration(user_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if current_duration is None:
        duration_text = "‚ôæÔ∏è –ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    else:
        from config import AVAILABLE_DURATIONS
        duration_text = AVAILABLE_DURATIONS.get(current_duration, f"{current_duration} –º–∏–Ω—É—Ç")

    text = f"‚è± <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ</b>\n\n–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {duration_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    keyboard = get_duration_selection_keyboard()

    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith("set_duration:"))
async def callback_set_duration(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await callback.answer()

    # –ü–∞—Ä—Å–∏–º callback_data: set_duration:duration_value
    duration_value = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if duration_value == "unlimited":
        duration_minutes = None
        duration_label = "‚ôæÔ∏è –ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    else:
        duration_minutes = int(duration_value)
        from config import AVAILABLE_DURATIONS
        duration_label = AVAILABLE_DURATIONS.get(duration_minutes, f"{duration_minutes} –º–∏–Ω—É—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    await set_user_max_duration(user_id, duration_minutes)

    text = f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n‚è± –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_label}\n\n"

    if duration_minutes is None:
        text += "–¢–µ–∫—Å—Ç –ª—é–±–æ–π –¥–ª–∏–Ω—ã –±—É–¥–µ—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω –≤ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª."
    else:
        text += f"–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç {duration_label}, –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤."

    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button_keyboard()
        )
    except TelegramBadRequest:
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_back_button_keyboard()
        )
