"""
Telegram Bot –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
"""

# –ö–†–ò–¢–ò–ß–ù–û: –î–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç uvloop (–æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!)
import os
import sys

os.environ['AIOGRAM_NO_UVLOOP'] = '1'

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Python 3.13+ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å!)
if sys.version_info >= (3, 13):
    import asyncio
    asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
else:
    import asyncio

import logging
import ssl
from pathlib import Path

import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ---
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat
# ------------------------------------

from config import (
    BOT_TOKEN,
    AUDIO_DIR,
    TELETHON_API_ID,
    TELETHON_API_HASH,
    TELETHON_PHONE,
    TELETHON_SESSION,
    OWNER_ID  # <-- –î–û–ë–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
)
from database import init_db
from handlers import router
from telethon_service import init_telethon_service, stop_telethon_service
# --- –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π middleware ---
from middlewares import SubscriptionCheckMiddleware
# -----------------------------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è aiogram
logging.getLogger("aiogram.event").setLevel(logging.WARNING)
logging.getLogger("aiogram.dispatcher").setLevel(logging.WARNING)
logging.getLogger("telethon").setLevel(logging.WARNING)

if sys.version_info >= (3, 13):
    logger.info("‚úì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π asyncio –¥–ª—è Python 3.13+")


# --- –ù–û–í–´–ô –ë–õ–û–ö: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand(command="menu", description="üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="üìñ –ü–æ–º–æ—â—å"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ]
    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    logger.info("‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    owner_commands = user_commands + [
        BotCommand(command="add_chat", description="üí¨ –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand(command="my_chats", description="üìú –ú–æ–∏ —á–∞—Ç—ã (–∞–¥–º–∏–Ω)"),
    ]
    await bot.set_my_commands(owner_commands, scope=BotCommandScopeChat(chat_id=OWNER_ID))
    logger.info(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (ID: {OWNER_ID}).")

# ---------------------------------------------------


async def on_startup(dispatcher: Dispatcher, bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ
    AUDIO_DIR.mkdir(parents=True, exist_ok=True)
    logger.info(f"‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞—É–¥–∏–æ: {AUDIO_DIR}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é ---
    await set_bot_commands(bot)
    # ------------------------------------------

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon —Å–µ—Ä–≤–∏—Å
    if TELETHON_API_ID and TELETHON_API_ID != 0:
        try:
            await init_telethon_service(
                session_string=TELETHON_SESSION,
                api_id=TELETHON_API_ID,
                api_hash=TELETHON_API_HASH,
                phone=TELETHON_PHONE
            )
            logger.info("‚úì Telethon —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ Telethon: {e}")
            logger.warning("–§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —á–∞—Ç–∞–º–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
    else:
        logger.warning("TELETHON_API_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://my.telegram.org")
        logger.warning("–§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —á–∞—Ç–∞–º–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")


async def on_shutdown(dispatcher: Dispatcher, bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    await stop_telethon_service()
    logger.info("‚úì –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # Workaround –¥–ª—è Python 3.13 + OpenSSL 3.6: –∏—Å–ø–æ–ª—å–∑—É–µ–º legacy SSL —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ TLS, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—ã–µ
    ssl_context.minimum_version = ssl.TLSVersion.TLSv1
    ssl_context.maximum_version = ssl.TLSVersion.TLSv1_3

    # –°–æ–∑–¥–∞–µ–º connector —Å legacy SSL
    connector = aiohttp.TCPConnector(
        ssl=ssl_context,
        limit=100,
        ttl_dns_cache=300,
        force_close=False,
        enable_cleanup_closed=True
    )

    # –ì–ª–æ–±–∞–ª—å–Ω–æ –ø–∞—Ç—á–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ SSL context –≤ aiohttp
    # –≠—Ç–æ —Å–∞–º—ã–π —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ —Ä–∞–±–æ—á–∏–π —Å–ø–æ—Å–æ–± –¥–ª—è Python 3.13
    original_create_default_context = ssl.create_default_context

    def patched_create_default_context(*args, **kwargs):
        context = original_create_default_context(*args, **kwargs)
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE
        try:
            context.minimum_version = ssl.TLSVersion.TLSv1
        except:
            pass
        return context

    ssl.create_default_context = patched_create_default_context

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ - –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω—ã–π SSL
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    logger.info("‚úì SSL –≥–ª–æ–±–∞–ª—å–Ω–æ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω (workaround –¥–ª—è Python 3.13)")

    # –°–æ–∑–¥–∞–µ–º Dispatcher —Å FSM storage
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_middleware = SubscriptionCheckMiddleware()
    dp.message.middleware(subscription_middleware)
    dp.callback_query.middleware(subscription_middleware)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)

    # –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle hooks
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    logger.info("‚úì –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å webhook (–º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å –∏–∑-–∑–∞ SSL –≤ Python 3.13)
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úì Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot, polling_timeout=20, handle_signals=True)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
